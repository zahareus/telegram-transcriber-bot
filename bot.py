import logging
import os
import json
import tempfile
import openai
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from flask import Flask
from threading import Thread

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä Flask ---
flask_app = Flask(__name__)
@flask_app.route('/')
def health_check(): return "Telegram bot is running", 200
def run_flask():
    port = int(os.environ.get('PORT', 10000))
    flask_app.run(host='0.0.0.0', port=port)
    logger.info("Flask server stopped.")

# --- –õ–æ–≥—ñ–∫–∞ Telegram –ë–æ—Ç–∞ ---
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN: logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN!"); exit()
if not OPENAI_API_KEY: logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ.")
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ ADMIN_USER_ID —ñ—Å–Ω—É—î —Ç–∞ —î —á–∏—Å–ª–æ–º
admin_id_set = False
if ADMIN_USER_ID:
    try:
        ADMIN_USER_ID = int(ADMIN_USER_ID)
        admin_id_set = True
    except ValueError:
        logger.error("ADMIN_USER_ID –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –≤—ñ–Ω –Ω–µ —î —á–∏—Å–ª–æ–º! –§—É–Ω–∫—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å.")
else:
    logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ADMIN_USER_ID! –§—É–Ω–∫—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å.")
    # –ú–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞, —è–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–µ
    # exit()

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI ---
try:
    openai.api_key = OPENAI_API_KEY
    logger.info("–ö–ª—ñ—î–Ω—Ç OpenAI —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó OpenAI: {e}")

# --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ---
user_status = {}
# TODO: –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏/–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ü–µ–π —Å–ª–æ–≤–Ω–∏–∫ —É —Ñ–∞–π–ª

def get_admin_keyboard(user_id_to_manage: int) -> InlineKeyboardMarkup:
    keyboard = [[
        InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id_to_manage}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id_to_manage}"),
    ]]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ª–æ–≥—ñ–≤ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def get_user_info(user) -> str:
     username = user.username or "N/A"
     first_name = user.first_name or ""
     last_name = user.last_name or ""
     full_name = f"{first_name} {last_name}".strip()
     return f"'{full_name}' (@{username}, ID: {user.id})"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    user_info = get_user_info(user) # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info} –∑–∞–ø—É—Å—Ç–∏–≤ /start.")
    status = user_status.get(user_id)

    if status == "approved": await update.message.reply_text("–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª (mp3, mp4, ogg).")
    elif status == "rejected": await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    elif status == "pending": await update.message.reply_text("–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.")
    else:
        logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        user_status[user_id] = "pending"
        await update.message.reply_html(rf"–ü—Ä–∏–≤—ñ—Ç, {user.mention_html()}! –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É...")
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ ADMIN_USER_ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ
        if admin_id_set:
            try:
                admin_message = (f"üîî –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n{user_info}\n\n–ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø?")
                keyboard = get_admin_keyboard(user_id)
                await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_message, reply_markup=keyboard) # –í–∏–¥–∞–ª–µ–Ω–æ parse_mode, –±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤ user_info
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ {user_info} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USER_ID}): {e}")
                await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                if user_id in user_status: del user_status[user_id]
        else:
             logger.error("–ù–µ –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç: ADMIN_USER_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.")
             await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")
             if user_id in user_status: del user_status[user_id]


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer(); admin_user = query.from_user
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ ADMIN_USER_ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º
    if not admin_id_set or admin_user.id != ADMIN_USER_ID: return
    action, user_id_str = query.data.split('_', 1)
    try: user_id_to_manage = int(user_id_str)
    except ValueError: logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π user_id: {query.data}"); return
    original_message = query.message.text; user_info_msg = ""

    # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ –ø—Ä–∏ /start)
    user_mention = f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{user_id_to_manage}`" # –ü–æ–∫–∏ —â–æ —Ç—ñ–ª—å–∫–∏ ID

    if action == "approve":
        logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user.id} —Å—Ö–≤–∞–ª–∏–≤ {user_id_to_manage}.")
        user_status[user_id_to_manage] = "approved"; await query.edit_message_text(text=f"{original_message}\n\n‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ {user_mention}.", parse_mode='Markdown')
        user_info_msg = "üéâ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø —Å—Ö–≤–∞–ª–µ–Ω–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –∞—É–¥—ñ–æ."
    elif action == "reject":
        logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ {user_id_to_manage}.")
        user_status[user_id_to_manage] = "rejected"; await query.edit_message_text(text=f"{original_message}\n\n‚ùå –î–æ—Å—Ç—É–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ {user_mention}.", parse_mode='Markdown')
        user_info_msg = "üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
    if user_info_msg:
        try: await context.bot.send_message(chat_id=user_id_to_manage, text=user_info_msg)
        except Exception as e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id_to_manage} ({action}): {e}")

# --- –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ ---
MAX_FILE_SIZE_MB = 25; MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; user_id = user.id
    user_info = get_user_info(user) # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_status.get(user_id) != "approved":
        logger.warning(f"–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_info}.")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return

    file_id = None; file_size = None; file_unique_id = None; message = update.message
    if message.voice: file_id, file_size, file_unique_id = message.voice.file_id, message.voice.file_size, message.voice.file_unique_id; logger.info(f"Voice from {user_info} (id: {file_id}, size: {file_size})")
    elif message.audio: file_id, file_size, file_unique_id = message.audio.file_id, message.audio.file_size, message.audio.file_unique_id; logger.info(f"Audio from {user_info} (id: {file_id}, size: {file_size}, name: {message.audio.file_name})")
    elif message.document and message.document.mime_type in ('audio/mpeg', 'audio/ogg', 'video/mp4', 'audio/mp4', 'audio/x-m4a'): file_id, file_size, file_unique_id = message.document.file_id, message.document.file_size, message.document.file_unique_id; logger.info(f"Document ({message.document.mime_type}) from {user_info} (id: {file_id}, size: {file_size}, name: {message.document.file_name})")

    if not file_id: return
    if file_size and file_size > MAX_FILE_SIZE_BYTES: logger.warning(f"File too large from {user_info}: {file_size}"); await message.reply_text(f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({file_size / 1024 / 1024:.1f} MB). –ú–∞–∫—Å: {MAX_FILE_SIZE_MB} MB."); return

    processing_msg = await message.reply_text("‚è≥ –û—Ç—Ä–∏–º–∞–≤, –ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫—É...")
    try: file_data = await context.bot.get_file(file_id)
    except Exception as e: logger.error(f"Failed get file info {file_id} from {user_info}: {e}"); await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª."); return

    file_extension = ".tmp"
    try:
        if message.voice: file_extension = ".oga"
        elif message.audio and message.audio.file_name: file_extension = os.path.splitext(message.audio.file_name)[1]
        elif message.document and message.document.file_name: file_extension = os.path.splitext(message.document.file_name)[1]
        if not file_extension or len(file_extension) > 5: file_extension = ".audio"
    except Exception as e: logger.warning(f"Could not determine file extension: {e}"); file_extension = ".audio"

    with tempfile.NamedTemporaryFile(suffix=file_extension, delete=True) as temp_file:
        try:
            await file_data.download_to_drive(temp_file.name)
            logger.info(f"File {file_unique_id} from {user_info} downloaded to {temp_file.name}")
        except Exception as e: logger.error(f"Error downloading {file_unique_id} to {temp_file.name}: {e}"); await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."); return

        try:
            logger.info(f"Sending {temp_file.name} to OpenAI Whisper (lang: uk)...")
            with open(temp_file.name, "rb") as audio_file_handle:
                transcription_response = openai.audio.transcriptions.create(model="whisper-1", file=audio_file_handle, language="uk")
            transcript_text = transcription_response.text
            logger.info(f"Transcription received for {file_unique_id} from {user_info}.")

            if transcript_text:
                 # <<< –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–£ (–ü–û–ß–ê–¢–û–ö) >>>
                if admin_id_set: # –ù–∞–¥—Å–∏–ª–∞—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ ADMIN_USER_ID –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                    try:
                        alert_message = f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info} —â–æ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é."
                        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=alert_message)
                        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é –≤—ñ–¥ {user_info}.")
                    except Exception as e:
                        # –ù–µ –±–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
                        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USER_ID}) –ø—Ä–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é –≤—ñ–¥ {user_info}: {e}")
                # <<< –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–£ (–ö–Ü–ù–ï–¶–¨) >>>

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                max_length = 4000; full_response_prefix = "–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∞:\n"
                await message.reply_text(full_response_prefix + transcript_text[:max_length-len(full_response_prefix)])
                for i in range(max_length-len(full_response_prefix), len(transcript_text), max_length):
                     chunk = transcript_text[i:i+max_length]
                     if chunk: await message.reply_text(chunk)
                await processing_msg.delete() # –í–∏–¥–∞–ª—è—î–º–æ "–û–±—Ä–æ–±–∫–∞..."
            else:
                logger.warning(f"Empty transcription for {file_unique_id} from {user_info}.")
                await processing_msg.edit_text("‚ÑπÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –∞—É–¥—ñ–æ.")

        except openai.APIError as e: logger.error(f"OpenAI API error for {file_unique_id}: {e}"); error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {e.body.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if e.body else '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}"; await processing_msg.edit_text(error_message)
        except Exception as e: logger.exception(f"General error during transcription of {file_unique_id}"); await processing_msg.edit_text("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main() -> None:
    logger.info("Starting main function...")
    # load_user_data()
    logger.info("Starting Flask server..."); flask_thread = Thread(target=run_flask); flask_thread.daemon = True; flask_thread.start(); logger.info("Flask thread started.")
    logger.info("Setting up Telegram bot application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^(approve|reject)_'))
    audio_handlers = MessageHandler(filters.VOICE | filters.AUDIO | filters.Document.FileExtension("mp3") | filters.Document.FileExtension("ogg") | filters.Document.FileExtension("mp4") | filters.Document.FileExtension("m4a") | filters.Document.MimeType("audio/ogg") | filters.Document.MimeType("audio/mp4"), handle_audio)
    application.add_handler(audio_handlers)

    logger.info("Starting Telegram bot polling...")
    application.run_polling()
    # save_user_data()
    logger.info("Telegram bot polling stopped.")

if __name__ == '__main__':
    main()
