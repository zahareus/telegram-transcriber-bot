import logging
import os
import json # –î–æ–¥–∞–Ω–æ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup # –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫–∏
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
from flask import Flask
from threading import Thread

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä Flask ---
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    return "Telegram bot is running", 200

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    flask_app.run(host='0.0.0.0', port=port)
    logger.info("Flask server stopped.")

# --- –õ–æ–≥—ñ–∫–∞ Telegram –ë–æ—Ç–∞ ---
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î)
if not TELEGRAM_BOT_TOKEN: logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN!"); exit()
if not OPENAI_API_KEY: logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ.") # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ warning
if not ADMIN_USER_ID: logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ADMIN_USER_ID!"); exit()
try:
    ADMIN_USER_ID = int(ADMIN_USER_ID)
except ValueError:
    logger.error("ADMIN_USER_ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!"); exit()

# --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ---
# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (user_id: status)
# status: "approved", "pending", "rejected"
# TODO: –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏/–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ü–µ–π —Å–ª–æ–≤–Ω–∏–∫ —É —Ñ–∞–π–ª
user_status = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_keyboard(user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –°—Ö–≤–∞–ª–∏—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏."""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id_to_manage}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id_to_manage}"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –∞–¥–º—ñ–Ω—É."""
    user = update.effective_user
    user_id = user.id
    username = user.username or "N/A"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({username}, {full_name}) –∑–∞–ø—É—Å—Ç–∏–≤ /start.")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    status = user_status.get(user_id)

    if status == "approved":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ —Å—Ö–≤–∞–ª–µ–Ω–∏–π.")
        await update.message.reply_text("–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø. –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞—É–¥—ñ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó.")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —è–∫ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞—É–¥—ñ–æ
    elif status == "rejected":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–∞–Ω—ñ—à–µ –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π.")
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    elif status == "pending":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –æ—á—ñ–∫—É—î –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.")
        await update.message.reply_text("–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.")
    else: # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_USER_ID}.")
        user_status[user_id] = "pending" # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ—á—ñ–∫—É—é—á–æ–≥–æ

        await update.message.reply_html(
            rf"–ü—Ä–∏–≤—ñ—Ç, {user.mention_html()}! –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —è–∫ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å."
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            admin_message = (
                f"üîî –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
                f"–Ü–º'—è: {full_name}\n"
                f"Username: @{username}\n"
                f"User ID: `{user_id}`\n\n"
                f"–ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø?"
            )
            keyboard = get_admin_keyboard(user_id)
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=admin_message,
                reply_markup=keyboard,
                parse_mode='Markdown' # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ID
            )
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ {user_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_USER_ID}): {e}")
            # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É?
            await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            del user_status[user_id] # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞

# –§—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –°—Ö–≤–∞–ª–∏—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏."""
    query = update.callback_query
    await query.answer() # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç, —â–æ–± –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–∫—Ä—É—Ç–∏—Ç–∏—Å—è"

    admin_user = query.from_user
    if admin_user.id != ADMIN_USER_ID:
        logger.warning(f"–°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω-–∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {admin_user.id}!")
        await query.edit_message_text(text="–ü–æ–º–∏–ª–∫–∞: –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "approve_123456789")
    action, user_id_str = query.data.split('_', 1)
    try:
        user_id_to_manage = int(user_id_str)
    except ValueError:
        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π user_id —É callback_data: {query.data}")
        await query.edit_message_text(text="–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
        return

    original_message = query.message.text # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    if action == "approve":
        logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")
        user_status[user_id_to_manage] = "approved"
        await query.edit_message_text(text=f"{original_message}\n\n‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{user_id_to_manage}`.", parse_mode='Markdown')
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await context.bot.send_message(
                chat_id=user_id_to_manage,
                text="üéâ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø —Å—Ö–≤–∞–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª–∏ –∞–±–æ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_to_manage}: {e}")

    elif action == "reject":
        logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")
        user_status[user_id_to_manage] = "rejected"
        await query.edit_message_text(text=
